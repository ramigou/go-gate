version: '3.8'

services:
  # Mock backend servers
  api-server-1:
    image: python:3.11-alpine
    container_name: go-gate-api-server-1
    working_dir: /app
    volumes:
      - ./test:/app
    command: python3 /app/docker-mock-server.py
    environment:
      - SERVER_NAME=API Server 1
      - SERVER_PORT=3001
    ports:
      - "3001:3001"
    networks:
      - go-gate-network

  api-server-2:
    image: python:3.11-alpine
    container_name: go-gate-api-server-2
    working_dir: /app
    volumes:
      - ./test:/app
    command: python3 /app/docker-mock-server.py
    environment:
      - SERVER_NAME=API Server 2
      - SERVER_PORT=3002
    ports:
      - "3002:3002"
    networks:
      - go-gate-network

  web-server:
    image: python:3.11-alpine
    container_name: go-gate-web-server
    working_dir: /app
    volumes:
      - ./test:/app
    command: python3 /app/docker-mock-server.py
    environment:
      - SERVER_NAME=Web Server
      - SERVER_PORT=4000
    ports:
      - "4000:4000"
    networks:
      - go-gate-network

  # Go-Gate reverse proxy
  go-gate:
    build: .
    container_name: go-gate-proxy
    ports:
      - "8080:8080"
    volumes:
      - ./configs/docker-config.yaml:/root/configs/config.yaml:ro
    depends_on:
      - api-server-1
      - api-server-2
      - web-server
    networks:
      - go-gate-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Test runner
  test-runner:
    image: alpine:latest
    container_name: go-gate-test-runner
    volumes:
      - ./test:/test
    depends_on:
      - go-gate
    networks:
      - go-gate-network
    command: >
      sh -c "
      apk add --no-cache curl &&
      sleep 10 &&
      echo 'Running tests...' &&
      cd /test &&
      echo '=== Testing API Routes ===' &&
      for i in 1 2 3 4 5; do
        echo 'API Request #'$$i':' &&
        curl -s http://go-gate:8080/api/users | grep server || echo 'Request failed'
      done &&
      echo '=== Testing Default Routes ===' &&
      for i in 1 2 3; do
        echo 'Default Request #'$$i':' &&
        curl -s http://go-gate:8080/default | grep server || echo 'Request failed'
      done &&
      echo '=== Testing Host-based Routing ===' &&
      curl -s -H 'Host: admin.example.com' http://go-gate:8080/dashboard | grep server || echo 'Admin request failed' &&
      curl -s -H 'Host: www.example.com' http://go-gate:8080/home | grep server || echo 'Web request failed' &&
      echo '=== All tests completed ==='
      "

networks:
  go-gate-network:
    driver: bridge